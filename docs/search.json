[{"path":"https://hardin47.github.io/sicegar/articles/additional_parameters.html","id":"additional-parameters-for-the-sigmoidal-model","dir":"Articles","previous_headings":"","what":"Additional parameters for the sigmoidal model","title":"Calculation of additional parameters of interest","text":"following parameters calculated parameterCalculation() sigmoidal model. 1. Maximum fitted curve. maximum_x: x value (.e., time) fitted curve reaches maximum value. nature sigmoidal function value always equal infinity, output always NA sigmoidal model. maximum_y: maximum intensity fitted curve reaches infinity. value equal maximum_Estimate. 2. Midpoint fitted curve. point slope maximal intensity half maximum intensity. midPoint_x: x value (.e., time) fitted curve reaches midpoint. value equal midPoint_Estimate. midPoint_y: intensity midpoint. value equal maximum_y / 2. 3. Slope fitted curve. slope: maximum slope fitted curve. slope midpoint. value equal slopeParam_Estimate * maximum_y / 4. 4. Parameters related slope tangent, tangent line passes midpoint curve. incrementTime: time interval slope tangent intersects horizontal line defined y = 0 intersects horizontal line defined y = maximum_y. value equal maximum_y / slope. startPoint_x: x value (.e., time) start point. start point defined point slope tangent intersects y = 0. approximately represents moment time intensity signal first appears. value equal midPoint_x - (incrementTime/2). startPoint_y: intensity start point. Equals zero definition. reachMaximum_x: x value (.e., time) reach maximum point. reach maximum point defined point slope tangent intersects y = maximum_y. approximately represents moment time intensity signal reaches maximum. value equal midPoint_x + (incrementTime/2). reachMaximum_y: intensity reach maximum point. Equals maximum_y definition.","code":""},{"path":"https://hardin47.github.io/sicegar/articles/additional_parameters.html","id":"additional-parameters-for-the-double-sigmoidal-model","dir":"Articles","previous_headings":"","what":"Additional parameters for the double-sigmoidal model","title":"Calculation of additional parameters of interest","text":"1. Maximum fitted curve. maximum_x: x value (.e., time) fitted curve reaches maximum value. Umut, value calculated? maximum_y: maximum intensity fitted curve reaches infinity. value equal maximum_Estimate. Umut, correct? 2. Final asymptote intensity fitted model finalAsymptoteIntensity: intensity fitted curve reaches asymptotically infinite time. value equal finalAsymptoteIntensityRatio_Estimate * maximum_y. 3. First midpoint fitted curve. point intensity first reaches half maximum. midPoint1_x: x value (.e., time) fitted curve reaches first midpoint. value calculated numerically different midPoint1Param_Estimate. midPoint1_y: intensity first midpoint. value equal maximum_y / 2. 4. Second midpoint fitted curve. point intensity decreases halfway maximum final asymptotic value. midPoint2_x: x value (.e., time) fitted curve reaches second midpoint. value calculated numerically different midPoint2Param_Estimate. midPoint2_y: intensity second midpoint. value equal finalAsymptoteIntensity + (maximum_y - finalAsymptoteIntensity) / 2. 5. Slopes fitted curve. slope1: slope fitted curve first midpoint. value calculated numerically different slope1Param_Estimate. slope2: slope fitted model second midpoint. value calculated numerically different slope2Param_Estimate. 6. Parameters related first slope tangent, tangent line passes first midpoint curve. incrementTime: time interval first slope tangent intersects horizontal line defined y = 0 intersects horizontal line defined y = maximum_y. value equal maximum_y / slope. startPoint_x: x value (.e., time) start point. start point defined point first slope tangent intersects y = 0. approximately represents moment time intensity signal first appears. value equal midPoint1_x - (incrementTime/2). startPoint_y: intensity start point. Equals zero definition. reachMaximum_x: x value (.e., time) reach maximum point. reach maximum point defined point fist slope tangent intersects y = maximum_y. approximately represents moment time intensity signal reaches maximum. value equal midPoint_x + (incrementTime/2). reachMaximum_y: intensity reach maximum point. Equals maximum_y definition. 7. Parameters related second slope tangent, tangent line passes second midpoint curve. decrementTime: time interval second slope tangent intersects horizontal line defined y = maximum_y intersects horizontal line defined y = finalAsymptoteIntensity. value equal - (maximum_y -finalAsymptoteIntensity)/ slope2. startDeclinePoint_x: x value (.e., time) start decline point. start decline point defined point second slope tangent intersects y = maximum_y. approximately represents moment time intensity signal starts drop maximum value. value equal midPoint2_x - (decrementTime/2). startDeclinePoint_y: intensity start decline point. Equals maximum_y definition. endDeclinePoint_x: x value (.e., time) end decline point. end decline point defined point second slope tangent intersects y = finalAsymptoteIntensity. approximately represents moment time intensity signal reaches final asymptotic intensity. value equal midPoint2_x + (decrementTime/2). endDeclinePoint_y: intensity end decline point. Equals finalAsymptoteIntensity definition.","code":""},{"path":"https://hardin47.github.io/sicegar/articles/categorizing_fits.html","id":"the-decision-process","dir":"Articles","previous_headings":"","what":"The decision process","title":"Identifying the best-fitting model category","text":"decision process consists two parts. First, categorize() function checks whether provided input data valid. steps verification follows: Pre-test 0: categorize() function provided sigmoidal double_sigmoidal models input? Pre-test 1: provided sigmoidal double sigmoidal models come source data name? Pre-test 2a: provided sigmoidal model generated sicegar::sigmoidalFitFunctions? Pre-test 2b: provided double_sigmoidal model generated sicegar::doublesigmoidalFitFunctions? Pre-test 3: models scaling parameters obtained data normalization process? Pre-test 4a: additional parameters sigmoidal fit calculated sicegar::parameterCalculation()? Pre-test 4b: additional parameters double-sigmoidal fit calculated sicegar::parameterCalculation()? steps, primary decision process begins. takes list four possible outcomes (“no_signal”, “sigmoidal”, “double_sigmoidal”, “ambiguous”) systematically removes options one remains. First, algorithm checks provided data includes signal . Test 1a: observed intensity maximum must bigger threshold_minimum_for_intensity_maximum; otherwise, data labeled \"no_signal\". Test 1b: intensity range, .e., absolute difference biggest smallest observed intensity, must greater threshold_intensity_range; otherwise, data labeled \"no_signal\". Test 1c: point data labeled \"no_signal\", data can labeled \"signal\" anymore. Next algorithm checks sigmoidal double sigmoidal models make sense. Test 2a: provided sigmoidal fit must successful fit; otherwise, data labeled \"sigmoidal\". Test 2b: provided double-sigmoidal fit must successful fit; otherwise, data labelled \"double_sigmoidal\". Test 3a: sigmoidal fit must AIC score smaller threshold_AIC; otherwise, data can labeled \"sigmoidal\". Test 3b: double-sigmoidal fit must AIC score smaller threshold_AIC; otherwise, data labeled \"double_sigmoidal\". Test 4a: value startPoint_x sigmoidal model must positive number; otherwise, data labeled \"sigmoidal\". Test 4b: value startPoint_x double-sigmoidal model must positive number; otherwise, data labeled \"double_sigmoidal\". Test 5a: value start_intensity sigmoidal model must smaller threshold_t0_max_int; otherwise, data labeled \"sigmoidal\". Test 5b: value start_intensity double-sigmoidal model must smaller threshold_t0_max_int; otherwise, data labeled \"double_sigmoidal\". Test 6: double-sigmoidal model, ratio /model’s intensity prediction last observation time/ /model’s maximum intensity prediction/ must smaller threshold_dsm_tmax_IntensityRatio; otherwise, data labeled \"double_sigmoidal\". Test 7: sigmoidal model; ratio /model’s intensity prediction last observation time/ /model’s maximum intensity prediction/ must larger threshold_sm_tmax_IntensityRatio; otherwise, data labeled \"sigmoidal\". step eight, algorithm checks whether data labelled \"ambiguous\" . Test 8: point still least one two options \"sigmoidal\" \"double_sigmoidal\", data labeled \"ambiguous\". last step; algorithm checks whether data labeled \"sigmoidal\" \"double_sigmoidal\". Test 9: point still \"sigmoidal\" \"double_sigmoidal\" options, choice made based AIC scores models value threshold_bonus_sigmoidal_AIC. sigmoidalAIC + threshold_bonus_sigmoidal_AIC  <  doublesigmoidalAIC, data labeled \"double_sigmoidal\". sigmoidalAIC + threshold_bonus_sigmoidal_AIC  >  doublesigmoidalAIC, data labeled \"sigmoidal\". option left point label data thus final decision.","code":""},{"path":"https://hardin47.github.io/sicegar/articles/fitting_individual_models.html","id":"fitting-the-models-to-the-data","dir":"Articles","previous_headings":"","what":"Fitting the models to the data","title":"Fitting individual models","text":"fit model data using function multipleFitFunction(), provide input normalized data model type fitted, can \"sigmoidal\" \"doublesigmoidal\". fitting models input data: two generated model objects contain large number computed parameters, described detail following. calculated quantities can grouped several different groups parameters: 1. Information fitting process model: String indicating type model, \"sigmoidal\" sigmoidal model \"doublesigmoidal\" double-sigmoidal model. isThisaFit: boolean equals TRUE least one fit successful FALSE otherwise. betterFit: number times minimum AIC score improved subsequent fitting attempt. words, counts number times multiple fit attempts increased fit quality. correctFit: total number successfull fits. totalFit: total number fit attempts. 2. Estimates fitted parameters estimates converted normalized data original raw data, main quantities interest user. depend type model, sigmoidal vs. double-sigmoidal. Estimates sigmoidal model : maximum_Estimate: Maximum intensity estimate raw data. slopeParam_Estimate: Slope parameter estimate raw data. Note slope parameter related equal slope. See vignette additional parameters details. midPoint_Estimate: Mid-point estimate (time intensity reaches 1/2 maximum) raw data. Estimates double-sigmoidal model : maximum_Estimate: Maximum intensity estimate raw data. slope1Param_Estimate: Slope 1 parameter estimate raw data. Note slope 1 parameter related equal slope. See vignette additional parameters details. midPoint1Param_Estimate: Mid-point 1 estimate (time intensity reaches 1/2 maximum) raw data. Needs numerical correction. See vignette additional parameters details. slope2Param_Estimate: Slope 2 parameter estimate raw data. Note slope 2 parameter related equal slope. See vignette additional parameters details. midPointDistanceParam_Estimate: Distance mid-point 1 mid-point 2, mid-point 2 time intensity decreases mean final asymptote intensity maximum value. Needs numerical correction. See vignette additional parameters details. finalAsymptoteIntensityRatio_Estimate: ratio asymptote intensity maximum intensity fitted curve. 3. Quantities measuring overall quality fit residual_Sum_of_Squares: Residual sum squares, smaller values indicate better fit. log_likelihood: Negative log likelihood, larger values indicate better fit. AIC_value: Akaike Information Criterion, smaller values indicate better fit. BIC_value: Bayesian Information Criterion, smaller values indicate better fit. 4. Start point gradient descent algorithm time fit attempted, likelihood maximization algorithm starts random initiation point finds final parameter estimates gradient descent. start vector best fit returned form variables whose name starts startVector., followed name estimated parameter. example: startVector.maximum: Value maximum parameter initiation point. 5. Parameters related normalization step dataScalingParameters.timeRange: Maximum raw time data. dataScalingParameters.intensityMin: Minimum raw intensity data. dataScalingParameters.intensityMax: Maximum raw intensity data. dataScalingParameters.intensityRange: Maximum - Minimum intensity data. 6. Error estimates fitted parameters estimated parameter listed point 2, algorithm provides additional statistical parameters, estimate normalized scale, standard error (also normalized scale), t value, P value. example, maximum estimate, : maximum_N_Estimate: Estimate normalized scale. maximum_Std_Error: Standard error, normalized scale. maximum_t_value: t value maximum_Pr_t: P value","code":"# Do the sigmoidal fit sigmoidalModel <- multipleFitFunction(dataInput=normalizedInput,                                       model=\"sigmoidal\")   # Do the double-sigmoidal fit doubleSigmoidalModel <- multipleFitFunction(dataInput=normalizedInput,                                             model=\"doublesigmoidal\") t(sigmoidalModel) ##                                      [,1]                    ## maximum_N_Estimate                   \"0.5817715\"             ## maximum_Std_Error                    \"0.0471064\"             ## maximum_t_value                      \"12.35016\"              ## maximum_Pr_t                         \"3.144059e-15\"          ## slopeParam_N_Estimate                \"56.69418\"              ## slopeParam_Std_Error                 \"62.92244\"              ## slopeParam_t_value                   \"0.901017\"              ## slopeParam_Pr_t                      \"0.3729725\"             ## midPoint_N_Estimate                  \"0.254053\"              ## midPoint_Std_Error                   \"0.02232296\"            ## midPoint_t_value                     \"11.38079\"              ## midPoint_Pr_t                        \"4.07523e-14\"           ## residual_Sum_of_Squares              \"2.947177\"              ## log_likelihood                       \"-3.38678\"              ## AIC_value                            \"14.77356\"              ## BIC_value                            \"21.81836\"              ## isThisaFit                           \"TRUE\"                  ## startVector.maximum                  \"0.4293649\"             ## startVector.slopeParam               \"17.12084\"              ## startVector.midPoint                 \"-0.2478345\"            ## dataScalingParameters.timeRange      \"24\"                    ## dataScalingParameters.intensityMin   \"0.2342345\"             ## dataScalingParameters.intensityMax   \"4.134632\"              ## dataScalingParameters.intensityRange \"3.900397\"              ## model                                \"sigmoidal\"             ## additionalParameters                 \"FALSE\"                 ## maximum_Estimate                     \"2.503374\"              ## slopeParam_Estimate                  \"2.362258\"              ## midPoint_Estimate                    \"6.097271\"              ## dataInputName                        \"doubleSigmoidalSample\" ## betterFit                            \"4\"                     ## correctFit                           \"20\"                    ## totalFit                             \"28\" t(doubleSigmoidalModel) ##                                          [,1]                    ## finalAsymptoteIntensityRatio_N_Estimate  \"0.2783729\"             ## finalAsymptoteIntensityRatio_Std_Error   \"0.005673176\"           ## finalAsymptoteIntensityRatio_t_value     \"49.06827\"              ## finalAsymptoteIntensityRatio_Pr_t        \"2.802985e-35\"          ## maximum_N_Estimate                       \"0.9890303\"             ## maximum_Std_Error                        \"0.00674476\"            ## maximum_t_value                          \"146.6368\"              ## maximum_Pr_t                             \"9.166088e-53\"          ## slope1Param_N_Estimate                   \"26.72541\"              ## slope1Param_Std_Error                    \"0.9129164\"             ## slope1Param_t_value                      \"29.27476\"              ## slope1Param_Pr_t                         \"3.431544e-27\"          ## midPoint1Param_N_Estimate                \"0.2942993\"             ## midPoint1Param_Std_Error                 \"0.001583065\"           ## midPoint1Param_t_value                   \"185.9048\"              ## midPoint1Param_Pr_t                      \"1.427291e-56\"          ## slope2Param_N_Estimate                   \"25.36587\"              ## slope2Param_Std_Error                    \"1.253865\"              ## slope2Param_t_value                      \"20.23014\"              ## slope2Param_Pr_t                         \"1.33991e-21\"           ## midPointDistanceParam_N_Estimate         \"0.334362\"              ## midPointDistanceParam_Std_Error          \"0.003221369\"           ## midPointDistanceParam_t_value            \"103.795\"               ## midPointDistanceParam_Pr_t               \"3.171517e-47\"          ## residual_Sum_of_Squares                  \"0.01073605\"            ## log_likelihood                           \"117.3356\"              ## AIC_value                                \"-220.6713\"             ## BIC_value                                \"-208.3429\"             ## isThisaFit                               \"TRUE\"                  ## startVector.finalAsymptoteIntensityRatio \"0.7374777\"             ## startVector.maximum                      \"0.6159543\"             ## startVector.slope1Param                  \"86.40114\"              ## startVector.midPoint1Param               \"0.5335278\"             ## startVector.slope2Param                  \"179.7345\"              ## startVector.midPointDistanceParam        \"0.212152\"              ## dataScalingParameters.timeRange          \"24\"                    ## dataScalingParameters.intensityMin       \"0.2342345\"             ## dataScalingParameters.intensityMax       \"4.134632\"              ## dataScalingParameters.intensityRange     \"3.900397\"              ## model                                    \"doublesigmoidal\"       ## additionalParameters                     \"FALSE\"                 ## finalAsymptoteIntensityRatio_Estimate    \"0.3196819\"             ## maximum_Estimate                         \"4.091846\"              ## slope1Param_Estimate                     \"1.113559\"              ## midPoint1Param_Estimate                  \"7.063182\"              ## slope2Param_Estimate                     \"1.056911\"              ## midPointDistanceParam_Estimate           \"8.024689\"              ## dataInputName                            \"doubleSigmoidalSample\" ## betterFit                                \"5\"                     ## correctFit                               \"20\"                    ## totalFit                                 \"40\""},{"path":"https://hardin47.github.io/sicegar/articles/introduction.html","id":"example-fit-on-simulated-input-data","dir":"Articles","previous_headings":"","what":"Example fit on simulated input data","title":"Introduction","text":"input fitting function must form data frame two columns called time intensity. use double-sigmoidal data generated arbitrarily chosen parameters. can use function doublesigmoidalFitFormula() generate double-sigmoidal curve, add random noise.  can now fit two models data determine better fit. done function fitAndCategorize(). three provided threshold parameters used categorization process depend units data measured. See vignette categorizing fits details. two fitted curves can visualized function figureModelCurves(), returns ggplot2 plot.  Clearly regular sigmoidal curve provide good fit double-sigmoidal curve . information available returned fit object:","code":"time <- seq(3, 24, 0.5) noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                     finalAsymptoteIntensityRatio = .3,                                     maximum = 4,                                     slope1Param = 1,                                     midPoint1Param = 7,                                     slope2Param = 1,                                     midPointDistanceParam = 8) intensity <- intensity+intensity_noise dataInput <- data.frame(time, intensity)  ggplot(dataInput, aes(time, intensity)) + geom_point() + theme_bw() fitObj <- fitAndCategorize(dataInput,                            threshold_minimum_for_intensity_maximum = 0.3,                            threshold_intensity_range = 0.1,                            threshold_t0_max_int = 1E10) # Double-sigmoidal fit with parameter related lines fig_a <- figureModelCurves(dataInput = fitObj$normalizedInput,                                   sigmoidalFitVector = fitObj$sigmoidalModel,                                   showParameterRelatedLines = TRUE)  fig_b <- figureModelCurves(dataInput = fitObj$normalizedInput,                                   doubleSigmoidalFitVector = fitObj$doubleSigmoidalModel,                                   showParameterRelatedLines = TRUE)  plot_grid(fig_a, fig_b, ncol = 2) # function from the cowplot package fitObj$decisionProcess$decision # final decision ## [1] \"double_sigmoidal\""},{"path":"https://hardin47.github.io/sicegar/articles/introduction.html","id":"the-fit-object","dir":"Articles","previous_headings":"","what":"The fit object","title":"Introduction","text":"fit object returned fitAndCategorize() contains information potentially interest course type analysis. consists five distinct components: component holds numerous parameters interest: .$normalizedInput: normalized dataset normalization parameters, raw dataset can recovered normalized one. information, see vignette fitting individual models. .$sigmoidalModel: parameters sigmoidal fit. information, see vignettes fitting individual models additional parameters. .$doubleSigmoidalModel: parameters double-sigmoidal fit. information, see vignettes fitting individual models additional parameters. .$decisionProcess: results decision process two models fit data better. information, see vignette categorizing fits. .$summaryVector: Key parameters winning model. important parameters extracted either .$sigmoidalModel .$doubleSigmoidalModel. , contents summary vector follows: parameters defined vignette additional parameters.","code":"names(fitObj) ## [1] \"normalizedInput\"      \"sigmoidalModel\"       \"doubleSigmoidalModel\" ## [4] \"decisionProcess\"      \"summaryVector\" str(fitObj$summaryVector) ## List of 21 ##  $ dataInputName          : logi NA ##  $ decision               : chr \"double_sigmoidal\" ##  $ maximum_x              : num 11 ##  $ maximum_y              : num 4.09 ##  $ midPoint1_x            : num 7.02 ##  $ midPoint1_y            : num 2.05 ##  $ midPoint2_x            : num 15.1 ##  $ midPoint2_y            : num 2.7 ##  $ slope1                 : num 1.17 ##  $ slope2                 : num -0.754 ##  $ finalAsymptoteIntensity: num 1.31 ##  $ incrementTime          : num 3.51 ##  $ startPoint_x           : num 5.27 ##  $ startPoint_y           : num 0 ##  $ reachMaximum_x         : num 8.77 ##  $ reachMaximum_y         : num 4.09 ##  $ decrementTime          : num 3.69 ##  $ startDeclinePoint_x    : num 13.3 ##  $ startDeclinePoint_y    : num 4.09 ##  $ endDeclinePoint_x      : num 17 ##  $ endDeclinePoint_y      : num 1.31"},{"path":"https://hardin47.github.io/sicegar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johanna Hardin. Author, maintainer. Samuel Butler. Author. Phineus Choi. Author. Thomas Matheis. Author. Mira Terdiman. Author. M. Umut Caglar. Author. Claus O. Wilke. Author.","code":""},{"path":"https://hardin47.github.io/sicegar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caglar MU, Teufel AI, Wilke CO. 2018. Sicegar: R package sigmoidal double-sigmoidal curve fitting. PeerJ 6:e4251 https://doi.org/10.7717/peerj.4251","code":"@Article{,   title = {Sicegar: {R} package for sigmoidal and double-sigmoidal curve fitting},   author = {M. Umut Caglar and Ashley I. Teufel and Claus O. Wilke},   year = {2018},   journal = {PeerJ},   volume = {6},   pages = {e4251},   doi = {10.7717/peerj.4251}, }"},{"path":"https://hardin47.github.io/sicegar/index.html","id":"r-package-sicegar","dir":"","previous_headings":"","what":"Analysis of Single-Cell Viral Growth Curves","title":"Analysis of Single-Cell Viral Growth Curves","text":"Originally written M. Umut Caglar Claus O. Wilke. Updates current maintenance Johanna Hardin, Sam Butler, Phineus Choi, Thomas Matheis, Mira Terdiman. package aims quantify time intensity data using sigmoidal double sigmoidal curves. fits sigmoidal double sigmoidal curves time vs intensity data. fits used make decision model (sigmoidal, double sigmoidal, signal, ambiguous) best describes data. signal means intensity reach high enough point change time. Sigmoidal means intensity starts small number climbs maximum. Double sigmoidal means intensity starts small number, climbs maximum starts decay. decision reached, algorithm returns parameters associated sigmoidal double-sigmoidal model quantifying time-intensity curve. package name stands “SIngle CEll Growth Analysis R”. CRAN: https://cran.r-project.org/package=sicegar Source: https://github.com/hardin47/sicegar","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"Catagorizes input data using results two model fitsand chosen thresholds.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"","code":"categorize(   parameterVectorSigmoidal,   parameterVectorDoubleSigmoidal,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3,   threshold_bonus_sigmoidal_AIC = 0,   threshold_sm_tmax_IntensityRatio = 0.85,   threshold_dsm_tmax_IntensityRatio = 0.75,   threshold_AIC = -10,   threshold_t0_max_int = 1e+10,   showDetails = FALSE )"},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"parameterVectorSigmoidal Output sigmoidalFitFunction. parameterVectorDoubleSigmoidal Output doublesigmoidalFitFunction. threshold_intensity_range Minimum intensity range, .e. lower limit allowed difference maximum minimum intensities (Default 0.1, values based actual, rescaled data.). threshold_minimum_for_intensity_maximum Minimum allowed value intensity maximum. (Default 0.3, values based actual, rescaled data.). threshold_bonus_sigmoidal_AIC Bonus AIC points sigmoidal fit. Negative values help sigmoidal model win. helps competition sigmoidal double sigmoidal fit decision step \"9\", .e. none models fail tests stay candidate last step (Default 0). threshold_sm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity theoretical maximum intensity sigmoidal curve. value threshold, data can represented sigmoidal model. (Default 0.85) threshold_dsm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity maximum intensity double sigmoidal curve.  value threshold, data can represented double sigmoidal model. (Default 0.75) threshold_AIC Maximum AIC values order meaningful fit (Default -10). threshold_t0_max_int Maximum allowed intensity fitted curve time equal zero (t=0). (Default 1E10, values based actual, rescaled data.). showDetails Logical chose want see details . Default \"FALSE\"","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"returned object contains extensive information decision process, key component decision variable. decision variable can one following four; \"no_signal\", \"infection\",\"infection&lysis\" \"ambugious\".","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize","text":"","code":"# Example 1 with double sigmoidal data time=seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 4,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- sicegar::normalizeData(dataInput,                                          dataInputName = \"sample001\")   # Fit sigmoidal model sigmoidalModel <- sicegar::multipleFitFunction(dataInput = normalizedInput,                                               model = \"sigmoidal\",                                               n_runs_min = 20,                                               n_runs_max = 500,                                               showDetails = FALSE)  # Fit double sigmoidal model doubleSigmoidalModel <- sicegar::multipleFitFunction(dataInput = normalizedInput,                                                     model = \"doublesigmoidal\",                                                     n_runs_min = 20,                                                     n_runs_max = 500,                                                     showDetails = FALSE)   # Calculate additional parameters sigmoidalModel <- sicegar::parameterCalculation(sigmoidalModel) doubleSigmoidalModel <- sicegar::parameterCalculation(doubleSigmoidalModel)  outputCluster <- sicegar::categorize(parameterVectorSigmoidal = sigmoidalModel,                                     parameterVectorDoubleSigmoidal = doubleSigmoidalModel)  utils::str(outputCluster) #> List of 40 #>  $ test.name                               : logi TRUE #>  $ dataInputName                           : chr \"sample001\" #>  $ test.sm_modelCheck                      : logi TRUE #>  $ test.dsm_modelCheck                     : logi TRUE #>  $ test.dataScalingParameters              : logi TRUE #>  $ intensityMaximum                        : num 4.17 #>  $ threshold_minimum_for_intensity_maximum : num 0.3 #>  $ test.minimum_for_intensity_maximum      : logi TRUE #>  $ intensityRange                          : num 4.08 #>  $ threshold_intensity_range               : num 0.1 #>  $ test.intensity_range                    : logi TRUE #>  $ test.sigmoidalFit                       : logi TRUE #>  $ test.doublesigmoidalFit                 : logi TRUE #>  $ test.sigmoidalAdditionalParameters      : logi TRUE #>  $ test.doublesigmoidalAdditionalParameters: logi TRUE #>  $ threshold_AIC                           : num -10 #>  $ sigmoidalAIC                            : num 21.2 #>  $ test.sigmoidalAIC                       : logi FALSE #>  $ doublesigmoidalAIC                      : num -1185 #>  $ test.doublesigmoidalAIC                 : logi TRUE #>  $ dsm_maximum_x                           : num 11 #>  $ timeRange                               : num 24 #>  $ test.dsm_maximum_x                      : logi TRUE #>  $ sm_tmax_IntensityRatio                  : num 1 #>  $ threshold_sm_tmax_IntensityRatio        : num 0.85 #>  $ test.sm_tmax_IntensityRatio             : logi TRUE #>  $ dsm_tmax_IntensityRatio                 : num 0.32 #>  $ threshold_dsm_tmax_IntensityRatio       : num 0.75 #>  $ test.dsm_tmax_IntensityRatio            : logi TRUE #>  $ sm_startPoint_x                         : num 4.94 #>  $ test.sm_startPoint_x                    : logi TRUE #>  $ dsm_startPoint_x                        : num 4.99 #>  $ test.dsm_startPoint_x                   : logi TRUE #>  $ sm_startIntensity                       : num 2.04e-05 #>  $ threshold_t0_max_int                    : num 1e+10 #>  $ test.sm_startIntensity                  : logi TRUE #>  $ dsm_startIntensity                      : num 0.00368 #>  $ test.dsm_startIntensity                 : logi TRUE #>  $ decisonSteps                            : chr \"1c_3a_8\" #>  $ decision                                : chr \"double_sigmoidal\""},{"path":"https://hardin47.github.io/sicegar/reference/categorize_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize input data by comparing the AIC values of the three fitted models. — categorize_h0","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize_h0","text":"Catagorizes input data using results two model fitsand chosen thresholds.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize_h0","text":"","code":"categorize_h0(   parameterVectorSigmoidal,   parameterVectorDoubleSigmoidal,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3,   threshold_bonus_sigmoidal_AIC = 0,   threshold_sm_tmax_IntensityRatio = 0.85,   threshold_dsm_tmax_IntensityRatio = 0.75,   threshold_AIC = -10,   threshold_t0_max_int = 1e+10,   showDetails = FALSE )"},{"path":"https://hardin47.github.io/sicegar/reference/categorize_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize_h0","text":"parameterVectorSigmoidal Output sigmoidalFitFunction. parameterVectorDoubleSigmoidal Output doublesigmoidalFitFunction. threshold_intensity_range Minimum intensity range, .e. lower limit allowed difference maximum minimum intensities (Default 0.1, values based actual, rescaled data.). threshold_minimum_for_intensity_maximum Minimum allowed value intensity maximum. (Default 0.3, values based actual, rescaled data.). threshold_bonus_sigmoidal_AIC Bonus AIC points sigmoidal fit. Negative values help sigmoidal model win. helps competition sigmoidal double sigmoidal fit decision step \"9\", .e. none models fail tests stay candidate last step (Default 0). threshold_sm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity theoretical maximum intensity sigmoidal curve. value threshold, data can represented sigmoidal model. (Default 0.85) threshold_dsm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity maximum intensity double sigmoidal curve.  value threshold, data can represented double sigmoidal model. (Default 0.75) threshold_AIC Maximum AIC values order meaningful fit (Default -10). threshold_t0_max_int Maximum allowed intensity fitted curve time equal zero (t=0). (Default 1E10, values based actual, rescaled data.). showDetails Logical chose want see details . Default \"FALSE\"","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize_h0","text":"returned object contains extensive information decision process, key component decision variable. decision variable can one following four; \"no_signal\", \"infection\",\"infection&lysis\" \"ambugious\".","code":""},{"path":"https://hardin47.github.io/sicegar/reference/categorize_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize input data by comparing the AIC values of the three fitted models. — categorize_h0","text":"","code":"# Example 1 with double sigmoidal data time=seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula_h0(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 4,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8,                                                h0 = 0) #> Error: 'doublesigmoidalFitFormula_h0' is not an exported object from 'namespace:sicegar' intensity <- intensity + intensity_noise #> Error: object 'intensity' not found  dataInput <- data.frame(intensity = intensity, time = time) #> Error: object 'intensity' not found normalizedInput <- sicegar::normalizeData_h0(dataInput,                                          dataInputName = \"sample001\") #> Error: 'normalizeData_h0' is not an exported object from 'namespace:sicegar'   # Fit sigmoidal model sigmoidalModel <- sicegar::multipleFitFunction_h0(dataInput = normalizedInput,                                               model = \"sigmoidal\",                                               n_runs_min = 20,                                               n_runs_max = 500,                                               showDetails = FALSE) #> Error: object 'normalizedInput' not found  # Fit double sigmoidal model doubleSigmoidalModel <- sicegar::multipleFitFunction_h0(dataInput = normalizedInput,                                                     model = \"doublesigmoidal\",                                                     n_runs_min = 20,                                                     n_runs_max = 500,                                                     showDetails = FALSE) #> Error: object 'normalizedInput' not found   # Calculate additional parameters sigmoidalModel <- sicegar::parameterCalculation_h0(sigmoidalModel) #> Error: object 'sigmoidalModel' not found doubleSigmoidalModel <- sicegar::parameterCalculation_h0(doubleSigmoidalModel) #> Error: object 'doubleSigmoidalModel' not found  outputCluster <- sicegar::categorize_h0(parameterVectorSigmoidal = sigmoidalModel,                                     parameterVectorDoubleSigmoidal = doubleSigmoidalModel) #> Error: object 'sigmoidalModel' not found  utils::str(outputCluster) #> Error: object 'outputCluster' not found"},{"path":"https://hardin47.github.io/sicegar/reference/dataCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if data is in correct format. — dataCheck","title":"Checks if data is in correct format. — dataCheck","text":"Checks input data appropriate , function converts suitable form. input data frame contain two columns named time intensity related time variable intensity variable respectively. data frame list name list $timeIntensityData.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/dataCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if data is in correct format. — dataCheck","text":"","code":"dataCheck(data, showDetails = TRUE)"},{"path":"https://hardin47.github.io/sicegar/reference/dataCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if data is in correct format. — dataCheck","text":"data input data. can either list contains data frame .$timeIntensityData can data frame . showDetails logical, TRUE function provide output \"check done\" everything OK. Default FALSE","code":""},{"path":"https://hardin47.github.io/sicegar/reference/dataCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if data is in correct format. — dataCheck","text":"","code":"# Example 1  # generate data frame time <- seq(3, 48, 0.5) intensity <- runif(length(time), 3.0, 7.5) dataInput <- data.frame(time, intensity)  # Apply dataCheck function dataOutputVariable <- dataCheck(dataInput)  # Example 2  # generate data frame time <- seq(3, 48, 0.5) intensity <- runif(length(time), 3.0, 7.5) dataInput <- data.frame(time, intensity)  # Normalize Data dataOutput <- normalizeData(dataInput) dataInput2 <- dataOutput  # Apply dataCheck function dataOutputVariable2 <- dataCheck(dataInput2)"},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Double Sigmoidal Formula — doublesigmoidalFitFormula","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"Calculates intensities using double-sigmoidal model fit parameters (maximum, final asymptote intensity, slope1Param, midpoint1Param, slope2Param, mid point distance).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"","code":"doublesigmoidalFitFormula(   x,   finalAsymptoteIntensityRatio,   maximum,   slope1Param,   midPoint1Param,   slope2Param,   midPointDistanceParam )"},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"x \"time\" (time) column dataframe finalAsymptoteIntensityRatio ratio asymptote intensity maximum intensity fitted curve. maximum maximum intensity double sigmoidal function reach. slope1Param slope parameter sigmoidal function steppest point exponential phase viral production. midPoint1Param x axis value steppest point function. slope2Param slope parameter sigmoidal function steppest point lysis phase. .e intensity decreasing. midPointDistanceParam distance time steppest increase steppest decrease intensity data. words distance x axis values arguments slope1Param slope2Param.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"Returns predicted intensities given time points double-sigmoidal fitted parameters double sigmoidal fit.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double Sigmoidal Formula — doublesigmoidalFitFormula","text":"","code":"time <- seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                       finalAsymptoteIntensityRatio = .3,                                       maximum = 4,                                       slope1Param = 1,                                       midPoint1Param = 7,                                       slope2Param = 1,                                       midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- doublesigmoidalFitFunction(normalizedInput, tryCounter = 2)   #Check the results if(parameterVector$isThisaFit){  intensityTheoretical <-        doublesigmoidalFitFormula(                time,                finalAsymptoteIntensityRatio = parameterVector$finalAsymptoteIntensityRatio_Estimate,                maximum = parameterVector$maximum_Estimate,                slope1Param = parameterVector$slope1Param_Estimate,                midPoint1Param = parameterVector$midPoint1Param_Estimate,                slope2Param = parameterVector$slope2Param_Estimate,                midPointDistanceParam = parameterVector$midPointDistanceParam_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical)) +    expand_limits(x = 0, y = 0)    }  if(!parameterVector$isThisaFit){   print(parameterVector)   } #>   finalAsymptoteIntensityRatio_N_Estimate #> 1                                      NA #>   finalAsymptoteIntensityRatio_Std_Error finalAsymptoteIntensityRatio_t_value #> 1                                     NA                                   NA #>   finalAsymptoteIntensityRatio_Pr_t maximum_N_Estimate maximum_Std_Error #> 1                                NA                 NA                NA #>   maximum_t_value maximum_Pr_t slope1Param_N_Estimate slope1Param_Std_Error #> 1              NA           NA                     NA                    NA #>   slope1Param_t_value slope1Param_Pr_t midPoint1Param_N_Estimate #> 1                  NA               NA                        NA #>   midPoint1Param_Std_Error midPoint1Param_t_value midPoint1Param_Pr_t #> 1                       NA                     NA                  NA #>   slope2Param_N_Estimate slope2Param_Std_Error slope2Param_t_value #> 1                     NA                    NA                  NA #>   slope2Param_Pr_t midPointDistanceParam_N_Estimate #> 1               NA                               NA #>   midPointDistanceParam_Std_Error midPointDistanceParam_t_value #> 1                              NA                            NA #>   midPointDistanceParam_Pr_t residual_Sum_of_Squares log_likelihood AIC_value #> 1                         NA                     Inf             NA        NA #>   BIC_value isThisaFit startVector.finalAsymptoteIntensityRatio #> 1        NA      FALSE                                0.6056477 #>   startVector.maximum startVector.slope1Param startVector.midPoint1Param #> 1           0.3048984                118.2376                 -0.2679487 #>   startVector.slope2Param startVector.midPointDistanceParam #> 1                35.85693                         0.1813866 #>   dataScalingParameters.timeRange dataScalingParameters.intensityMin #> 1                              24                          0.1319207 #>   dataScalingParameters.intensityMax dataScalingParameters.intensityRange #> 1                           4.198132                             4.066211 #>             model finalAsymptoteIntensityRatio_Estimate maximum_Estimate #> 1 doublesigmoidal                                    NA               NA #>   slope1Param_Estimate midPoint1Param_Estimate slope2Param_Estimate #> 1                   NA                      NA                   NA #>   midPointDistanceParam_Estimate #> 1                             NA"},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Double sigmoidal fit function. — doublesigmoidalFitFunction","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"function fits double sigmoidal curve given data using likelihood maximization (LM) algorithm provides parameters (maximum, final asymptote intensity, slope1Param, midpoint1Param, slope2Param, midpoint distance) describing double-sigmoidal fit output. also contains information goodness fits AIC, BIC, residual sum squares, log likelihood.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"","code":"doublesigmoidalFitFunction(   dataInput,   tryCounter,   startList = list(finalAsymptoteIntensityRatio = 0, maximum = 1, slope1Param = 1,     midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam = 0.29),   lowerBounds = c(finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param = 0.01,     midPoint1Param = -0.52, slope2Param = 0.01, midPointDistanceParam = 0.04),   upperBounds = c(finalAsymptoteIntensityRatio = 1, maximum = 1.5, slope1Param = 180,     midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63),   min_Factor = 1/2^20,   n_iterations = 1000 )"},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. tryCounter counter shows number times data fit via maximum likelihood function. startList initial set parameters vector algorithm tries first fit attempt relevant parameters. vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults  finalAsymptoteIntensityRatio = 0, maximum = 1, slope1Param = 1, midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam=0.29. numbers normalized time intensity scale. lowerBounds lower bounds randomly generated start parameters.  vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param = .01, midPoint1Param = -0.52, slope2Param = .01, midPointDistanceParam = 0.04. numbers normalized time intensity scale. upperBounds upper bounds randomly generated start parameters.  vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults finalAsymptoteIntensityRatio = 1, maximum = 1.5, slope1Param = 180, midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63. numbers normalized time intensity scale. min_Factor Defines minimum step size used fitting algorithm. Default 1/2^20. n_iterations Define maximum number iterations used fitting algorithm. Default 1000","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"Returns fitted parameters goodness fit metrics.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/doublesigmoidalFitFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double sigmoidal fit function. — doublesigmoidalFitFunction","text":"","code":"time=seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                      finalAsymptoteIntensityRatio = .3,                                      maximum = 4,                                      slope1Param = 1,                                      midPoint1Param = 7,                                      slope2Param = 1,                                      midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- doublesigmoidalFitFunction(normalizedInput, tryCounter = 2)   #Check the results if(parameterVector$isThisaFit){     intensityTheoretical <-          doublesigmoidalFitFormula(              time,              finalAsymptoteIntensityRatio = parameterVector$finalAsymptoteIntensityRatio_Estimate,              maximum = parameterVector$maximum_Estimate,              slope1Param = parameterVector$slope1Param_Estimate,              midPoint1Param = parameterVector$midPoint1Param_Estimate,              slope2Param = parameterVector$slope2Param_Estimate,              midPointDistanceParam = parameterVector$midPointDistanceParam_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical)) +    expand_limits(x = 0, y = 0)} #> Loading required package: ggplot2   if(!parameterVector$isThisaFit) {print(parameterVector)}"},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate model associated figures. — figureModelCurves","title":"Generate model associated figures. — figureModelCurves","text":"Generates figures using ggplot shows input data fitted curves.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate model associated figures. — figureModelCurves","text":"","code":"figureModelCurves(   dataInput,   sigmoidalFitVector = NULL,   doubleSigmoidalFitVector = NULL,   showParameterRelatedLines = FALSE,   xlabelText = \"time\",   ylabelText = \"intensity\",   fittedXmin = 0,   fittedXmax = NA,   use_h0 = FALSE )"},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate model associated figures. — figureModelCurves","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. sigmoidalFitVector output sicegar::sigmoidalFitFunction(), agumented version output generated help sicegar::parameterCalculation(), contains parameters related sigmoidal model. Default NULL. doubleSigmoidalFitVector output sicegar::doubleSigmoidalFitFunction(), agumented version output generated help sicegar::parameterCalculation(), contains parameters related double sigmoidal model. Default NULL. showParameterRelatedLines equal TRUE, figure show parameter related lines curves. Default FALSE. xlabelText x-axis name; default \"time\" ylabelText y-axis name; default \"intensity\" fittedXmin minimum fitted data plotted (Default 0) fittedXmax maximum fitted data plotted (Default timeRange) use_h0 Boolean decides whether fix lower asymptote h0 0 (FALSE, default) freely estimate h0 (TRUE)","code":""},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate model associated figures. — figureModelCurves","text":"Returns infection curve figures.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/figureModelCurves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate model associated figures. — figureModelCurves","text":"","code":"time <- seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 4,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- sicegar::normalizeData(dataInput, dataInputName = \"sample001\")   # Do the double sigmoidal fit doubleSigmoidalModel <- sicegar::multipleFitFunction(dataInput = normalizedInput,                                                     model = \"doublesigmoidal\",                                                     n_runs_min = 20,                                                     n_runs_max = 500,                                                     showDetails = FALSE)  doubleSigmoidalModel <- sicegar::parameterCalculation(doubleSigmoidalModel)  fig01 <- sicegar::figureModelCurves(dataInput = normalizedInput,                                   doubleSigmoidalFitVector = doubleSigmoidalModel,                                   showParameterRelatedLines = TRUE) print(fig01)"},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and categorize. — fitAndCategorize","title":"Fit and categorize. — fitAndCategorize","text":"Fits sigmoidal double-sigmoidal models data categorizes data according model fits best.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and categorize. — fitAndCategorize","text":"","code":"fitAndCategorize(   dataInput,   dataInputName = NA,   n_runs_min_sm = 20,   n_runs_max_sm = 500,   n_runs_min_dsm = 20,   n_runs_max_dsm = 500,   showDetails = FALSE,   startList_sm = list(maximum = 1, slopeParam = 1, midPoint = 0.33),   lowerBounds_sm = c(maximum = 0.3, slopeParam = 0.01, midPoint = -0.52),   upperBounds_sm = c(maximum = 1.5, slopeParam = 180, midPoint = 1.15),   min_Factor_sm = 1/2^20,   n_iterations_sm = 1000,   startList_dsm = list(finalAsymptoteIntensityRatio = 0, maximum = 1, slope1Param = 1,     midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam = 0.29),   lowerBounds_dsm = c(finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param =     0.01, midPoint1Param = -0.52, slope2Param = 0.01, midPointDistanceParam = 0.04),   upperBounds_dsm = c(finalAsymptoteIntensityRatio = 1, maximum = 1.5, slope1Param = 180,     midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63),   min_Factor_dsm = 1/2^20,   n_iterations_dsm = 1000,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3,   threshold_bonus_sigmoidal_AIC = 0,   threshold_sm_tmax_IntensityRatio = 0.85,   threshold_dsm_tmax_IntensityRatio = 0.75,   threshold_AIC = -10,   threshold_t0_max_int = 1e+10,   stepSize = 1e-05,   use_h0 = FALSE,   ... )"},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and categorize. — fitAndCategorize","text":"dataInput Un_normalized input data fitted transferred related functions dataInputName Name data set (Default 'NA'). n_runs_min_sm number indicates lower limit successful fitting attempts sigmoidal model. smaller upper limit fitting attempts (n_runs_max_sm). Default 20 n_runs_max_sm number indicates upper limit fitting attempts sigmoidal model. Default 500 n_runs_min_dsm number indicates lower limit successful fitting attempts double sigmoidal model. smaller upper limit fitting attempts (n_runs_max_dsm). Default 20 n_runs_max_dsm number indicates upper limit fitting attempts sigmoidal model double sigmoidal model. Default 500 showDetails Logical TRUE prints details intermediate steps individual fits (Default FALSE). startList_sm initial set parameters vector sigmoidal fit algorithm tries first fit attempt relevant parameters. vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'.  Detailed explanations parameters can found vignettes. Defaults maximum = 1, slopeParam = 1 , midPoint = 0.33. numbers normalized time intensity scale. lowerBounds_sm lower bounds randomly generated start parameters sigmoidal fit. vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'. Detailed explanations parameters can found vignettes. Defaults maximum = 0.3, slopeParam = 0.01, midPoint = -0.52. numbers normalized time intensity scale. upperBounds_sm upper bounds randomly generated start parameters sigmoidal fit. vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'. Detailed explanations parameters can found vignettes. Defaults maximum = 1.5, slopeParam = 180,  midPoint = 1.15. numbers normalized time intensity scale. min_Factor_sm Defines Defines minimum step size used sigmoidal fit algorithm. Default 1/2^20. n_iterations_sm Defines maximum number iterations used sigmoidal fit algorithm. Default 1000 startList_dsm initial set parameters vector double sigmoidal fit algorithm tries first fit attempt relevant parameters. vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults  finalAsymptoteIntensityRatio = 0, maximum = 1, slope1Param = 1, midPoint1Param = 0.33, slope2Param = 1, midPointDistanceParam=0.29. numbers normalized time intensity scale. lowerBounds_dsm lower bounds randomly generated start parameters double sigmoidal fit.  vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults finalAsymptoteIntensityRatio = 0, maximum = 0.3, slope1Param = .01, midPoint1Param = -0.52, slope2Param = .01, midPointDistanceParam = 0.04. numbers normalized time intensity scale. upperBounds_dsm upper bounds randomly generated start parameters double sigmoidal fit.  vector composes six elements; 'finalAsymptoteIntensityRatio', 'maximum', 'slope1Param', 'midPoint1Param' , 'slope2Param', 'midPointDistanceParam'. Detailed explanations parameters can found vignettes. Defaults finalAsymptoteIntensityRatio = 1, maximum = 1.5, slope1Param = 180, midPoint1Param = 1.15, slope2Param = 180, midPointDistanceParam = 0.63. numbers normalized time intensity scale. min_Factor_dsm Defines minimum step size used double sigmoidal fit algorithm. Default 1/2^20. n_iterations_dsm Define maximum number iterations used double sigmoidal fit algorithm. Default 1000 threshold_intensity_range Minimum intensity range, .e. lower limit allowed difference maximum minimum intensities (Default 0.1, values based actual, rescaled data.). threshold_minimum_for_intensity_maximum Minimum allowed value intensity maximum. (Default 0.3, values based actual, rescaled data.). threshold_bonus_sigmoidal_AIC Bonus AIC points sigmoidal fit. Negative values help sigmoidal model win. helps competition sigmoidal double sigmoidal fit decision step \"9\", .e. none models fail tests stay candidate last step (Default 0). threshold_sm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity theoretical maximum intensity sigmoidal curve. value threshold, data can represented sigmoidal model. (Default 0.85) threshold_dsm_tmax_IntensityRatio threshold minimum intensity ratio last observed time points intensity maximum intensity double sigmoidal curve.  value threshold, data can represented double sigmoidal model. (Default 0.75) threshold_AIC Maximum AIC values order meaningful fit (Default -10). threshold_t0_max_int Maximum allowed intensity fitted curve time equal zero (t=0). (Default 1E10, values based actual, rescaled data.). stepSize Step size used fitting algorithm. Smaller numbers gave accurate results larger numbers, larger numbers gave results faster small numbers. default value 0.00001. use_h0 Boolean decides whether fix lower asymptote h0 0 (FALSE, default) freely estimate h0 (TRUE) ... arguments model functions (\"sigmoidalFitFunction\" , \"doublesigmoidalFitFunction\") may need.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and categorize. — fitAndCategorize","text":"Returns parameters related curve fitted input data.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/fitAndCategorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit and categorize. — fitAndCategorize","text":"","code":"# Example 1 time <- seq(3, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 4,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time)  fitObj <- sicegar::fitAndCategorize(dataInput = dataInput)"},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"multiple fit function. — multipleFitFunction","title":"multiple fit function. — multipleFitFunction","text":"Calls fitting algorithms fit data multiple times starting different randomly generated initial parameters run. Multiple attempts fitting data necessary avoid local minima.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multiple fit function. — multipleFitFunction","text":"","code":"multipleFitFunction(   dataInput,   dataInputName = NA,   model,   n_runs_min = 20,   n_runs_max = 500,   showDetails = FALSE,   ... )"},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multiple fit function. — multipleFitFunction","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. dataInputName Name data set (Default 'NA'). model Type fit model used. Can \"sigmoidal\", \"double_sigmoidal\". n_runs_min number indicates lower limit successful fitting attempts. smaller upper limit fitting attempts (n_runs_max). Default 20. n_runs_max number indicates upper limit fitting attempts. Default 500. showDetails Logical TRUE prints details intermediate steps individual fits (Default FALSE). ... arguments model functions (\"sigmoidalFitFunction\" , \"doublesigmoidalFitFunction\") may need.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multiple fit function. — multipleFitFunction","text":"Returns parameters related model fitted input data.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multiple fit function. — multipleFitFunction","text":"","code":"# Example 1 (sigmoidal function with normalization) time <- seq(3, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 2.5 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula(time, maximum = 4, slopeParam = 1, midPoint = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput, dataInputName = \"sample001\") parameterVector <- multipleFitFunction(dataInput = normalizedInput,                                       model = \"sigmoidal\",                                       n_runs_min = 20,                                       n_runs_max = 500)  #Check the results if(parameterVector$isThisaFit){   intensityTheoretical <- sigmoidalFitFormula(time,                             maximum = parameterVector$maximum_Estimate,                             slopeParam = parameterVector$slopeParam_Estimate,                             midPoint = parameterVector$midPoint_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   print(parameterVector$residual_Sum_of_Squares)   require(ggplot2)  ggplot(comparisonData)+    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical), color = \"orange\") +    expand_limits(x = 0, y = 0) } #> [1] 0.7136704     if(!parameterVector$isThisaFit){   print(parameterVector) }  # Example 2 (doublesigmoidal function with normalization) time <- seq(3, 24, 0.1)  #simulate intensity data with noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula(time,                                       finalAsymptoteIntensityRatio = .3,                                       maximum = 4,                                       slope1Param = 1,                                       midPoint1Param = 7,                                       slope2Param = 1,                                       midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- multipleFitFunction(dataInput = normalizedInput,                            dataInputName=\"sample001\",                            model = \"doublesigmoidal\",                            n_runs_min = 20,                            n_runs_max = 500,                            showDetails = FALSE)   #Check the results if(parameterVector$isThisaFit){  intensityTheoretical <-        doublesigmoidalFitFormula(                time,                finalAsymptoteIntensityRatio = parameterVector$finalAsymptoteIntensityRatio_Estimate,                maximum = parameterVector$maximum_Estimate,                slope1Param = parameterVector$slope1Param_Estimate,                midPoint1Param = parameterVector$midPoint1Param_Estimate,                slope2Param = parameterVector$slope2Param_Estimate,                midPointDistanceParam = parameterVector$midPointDistanceParam_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical), color = \"orange\") +    expand_limits(x = 0, y = 0)  }   if(!parameterVector$isThisaFit){   print(parameterVector)   }"},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"multiple fit function h0. — multipleFitFunction_h0","title":"multiple fit function h0. — multipleFitFunction_h0","text":"Calls fitting algorithms fit data multiple times starting different randomly generated initial parameters run. Multiple attempts fitting data necessary avoid local minima.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multiple fit function h0. — multipleFitFunction_h0","text":"","code":"multipleFitFunction_h0(   dataInput,   dataInputName = NA,   model,   n_runs_min = 20,   n_runs_max = 500,   showDetails = FALSE,   ... )"},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multiple fit function h0. — multipleFitFunction_h0","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. dataInputName Name data set (Default 'NA'). model Type fit model used. Can \"sigmoidal\", \"double_sigmoidal\". n_runs_min number indicates lower limit successful fitting attempts. smaller upper limit fitting attempts (n_runs_max). Default 20. n_runs_max number indicates upper limit fitting attempts. Default 500. showDetails Logical TRUE prints details intermediate steps individual fits (Default FALSE). ... arguments model functions (\"sigmoidalFitFunction\" , \"doublesigmoidalFitFunction\") may need.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multiple fit function h0. — multipleFitFunction_h0","text":"Returns parameters related model fitted input data.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/multipleFitFunction_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multiple fit function h0. — multipleFitFunction_h0","text":"","code":"# Example 1 (sigmoidal function with normalization) time <- seq(3, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 2.5 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula_h0(time, maximum = 4, slopeParam = 1, midPoint = 8, h0 = 0) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData_h0(dataInput, dataInputName = \"sample001\") #> Error in normalizeData_h0(dataInput, dataInputName = \"sample001\"): could not find function \"normalizeData_h0\" parameterVector <- multipleFitFunction_h0(dataInput = normalizedInput,                                       model = \"sigmoidal\",                                       n_runs_min = 20,                                       n_runs_max = 500) #> Error: object 'normalizedInput' not found  #Check the results if(parameterVector$isThisaFit){   intensityTheoretical <- sigmoidalFitFormula_h0(time,                             maximum = parameterVector$maximum_Estimate,                             slopeParam = parameterVector$slopeParam_Estimate,                             midPoint = parameterVector$midPoint_Estimate,                             h0 = parameterVector$h0_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   print(parameterVector$residual_Sum_of_Squares)   require(ggplot2)  ggplot(comparisonData)+    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical), color = \"orange\") +    expand_limits(x = 0, y = 0) } #> Error: object 'parameterVector' not found    if(!parameterVector$isThisaFit){   print(parameterVector) } #> Error: object 'parameterVector' not found  # Example 2 (doublesigmoidal function with normalization) time <- seq(3, 24, 0.1)  #simulate intensity data with noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- doublesigmoidalFitFormula_h0(time,                                       finalAsymptoteIntensityRatio = .3,                                       maximum = 4,                                       slope1Param = 1,                                       midPoint1Param = 7,                                       slope2Param = 1,                                       midPointDistanceParam = 8,                                       h0 = 0) #> Error in doublesigmoidalFitFormula_h0(time, finalAsymptoteIntensityRatio = 0.3,     maximum = 4, slope1Param = 1, midPoint1Param = 7, slope2Param = 1,     midPointDistanceParam = 8, h0 = 0): could not find function \"doublesigmoidalFitFormula_h0\" intensity <- intensity + intensity_noise #> Warning: longer object length is not a multiple of shorter object length  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData_h0(dataInput) #> Error in normalizeData_h0(dataInput): could not find function \"normalizeData_h0\" parameterVector <- multipleFitFunction_h0(dataInput = normalizedInput,                            dataInputName=\"sample001\",                            model = \"doublesigmoidal\",                            n_runs_min = 20,                            n_runs_max = 500,                            showDetails = FALSE) #> Error: object 'normalizedInput' not found   #Check the results if(parameterVector$isThisaFit){  intensityTheoretical <-        doublesigmoidalFitFormula_h0(                time,                finalAsymptoteIntensityRatio = parameterVector$finalAsymptoteIntensityRatio_Estimate,                maximum = parameterVector$maximum_Estimate,                slope1Param = parameterVector$slope1Param_Estimate,                midPoint1Param = parameterVector$midPoint1Param_Estimate,                slope2Param = parameterVector$slope2Param_Estimate,                midPointDistanceParam = parameterVector$midPointDistanceParam_Estimate,                h0 = parameterVector$h0_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical), color = \"orange\") +    expand_limits(x = 0, y = 0)  } #> Error: object 'parameterVector' not found  if(!parameterVector$isThisaFit){   print(parameterVector)   } #> Error: object 'parameterVector' not found"},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization of given data — normalizeData","title":"Normalization of given data — normalizeData","text":"Maps given time-intensity data rescaled data frame time scaled 0 1, intensity scaled 0 1.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalization of given data — normalizeData","text":"","code":"normalizeData(dataInput, dataInputName = NA)"},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalization of given data — normalizeData","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. dataInputName experiment name (Default 'NA').","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalization of given data — normalizeData","text":"Function returns new data frame, scaling factors scaling constants connects initial data frame new one. new data frame includes 2 columns one normalized time noralized intensity. whole time distributed 0 1 similarly whole intensity distributed 0 1. time intensity constants scaling factors parameters transform data unnormalized data frame normalized data frame.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/normalizeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalization of given data — normalizeData","text":"","code":"# generateRandomData time <- seq(3, 48, 0.5) intensity <- runif(length(time), 3.0, 7.5) dataInput <- data.frame(time, intensity)  # Normalize Data dataOutput <- normalizeData(dataInput, dataInputName=\"sample001\")"},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":null,"dir":"Reference","previous_headings":"","what":"useful parameter calculation with help of fits — parameterCalculation","title":"useful parameter calculation with help of fits — parameterCalculation","text":"Generates useful values external use, help parameterVector's fits.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"useful parameter calculation with help of fits — parameterCalculation","text":"","code":"parameterCalculation(parameterVector, stepSize = 1e-05)"},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"useful parameter calculation with help of fits — parameterCalculation","text":"parameterVector Output multiple fit function sicegar::multipleFitFunction() gives variables related sigmoidal double sigmoidal fit. stepSize Step size used fitting algorithm. Smaller numbers gave accurate results larger numbers, larger numbers gave results faster small numbers. default value 0.00001.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"useful parameter calculation with help of fits — parameterCalculation","text":"Returns expanded parameter vector. vector includes useful derived values time intensity start point, addition standard values fit algorithms produce necessary define curves.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"useful parameter calculation with help of fits — parameterCalculation","text":"","code":"time <- seq(3, 24, 0.1)  #simulate intensity data with noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula(time,                                             finalAsymptoteIntensityRatio = .3,                                             maximum = 4,                                             slope1Param = 1,                                             midPoint1Param = 7,                                             slope2Param = 1,                                             midPointDistanceParam = 8) intensity <- intensity+intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- sicegar::normalizeData(dataInput) parameterVector <- sicegar::multipleFitFunction(dataInput = normalizedInput,                                             dataInputName = \"sample01\",                                             model = \"doublesigmoidal\",                                             n_runs_min = 20,                                             n_runs_max = 500,                                             showDetails = FALSE)  if(parameterVector$isThisaFit){        parameterVector <- sicegar::parameterCalculation(parameterVector) }  print(t(parameterVector)) #>                                          [,1]              #> finalAsymptoteIntensityRatio_N_Estimate  \"0.3038042\"       #> finalAsymptoteIntensityRatio_Std_Error   \"0.002111644\"     #> finalAsymptoteIntensityRatio_t_value     \"143.871\"         #> finalAsymptoteIntensityRatio_Pr_t        \"7.571987e-208\"   #> maximum_N_Estimate                       \"0.9777809\"       #> maximum_Std_Error                        \"0.002421469\"     #> maximum_t_value                          \"403.7967\"        #> maximum_Pr_t                             \"2.405927e-299\"   #> slope1Param_N_Estimate                   \"24.56348\"        #> slope1Param_Std_Error                    \"0.3009569\"       #> slope1Param_t_value                      \"81.61792\"        #> slope1Param_Pr_t                         \"2.764033e-158\"   #> midPoint1Param_N_Estimate                \"0.2904004\"       #> midPoint1Param_Std_Error                 \"0.0006279484\"    #> midPoint1Param_t_value                   \"462.4589\"        #> midPoint1Param_Pr_t                      \"2.079027e-311\"   #> slope2Param_N_Estimate                   \"24.99833\"        #> slope2Param_Std_Error                    \"0.4651255\"       #> slope2Param_t_value                      \"53.74533\"        #> slope2Param_Pr_t                         \"8.770739e-123\"   #> midPointDistanceParam_N_Estimate         \"0.3358501\"       #> midPointDistanceParam_Std_Error          \"0.001265396\"     #> midPointDistanceParam_t_value            \"265.4111\"        #> midPointDistanceParam_Pr_t               \"4.657598e-262\"   #> residual_Sum_of_Squares                  \"0.03803429\"      #> log_likelihood                           \"610.1327\"        #> AIC_value                                \"-1206.265\"       #> BIC_value                                \"-1182.802\"       #> isThisaFit                               \"TRUE\"            #> startVector.finalAsymptoteIntensityRatio \"0.1650074\"       #> startVector.maximum                      \"1.299041\"        #> startVector.slope1Param                  \"18.9947\"         #> startVector.midPoint1Param               \"0.5781513\"       #> startVector.slope2Param                  \"86.679\"          #> startVector.midPointDistanceParam        \"0.2201184\"       #> dataScalingParameters.timeRange          \"24\"              #> dataScalingParameters.intensityMin       \"0.1131093\"       #> dataScalingParameters.intensityMax       \"4.168064\"        #> dataScalingParameters.intensityRange     \"4.054955\"        #> model                                    \"doublesigmoidal\" #> additionalParameters                     \"TRUE\"            #> finalAsymptoteIntensityRatio_Estimate    \"0.3231144\"       #> maximum_Estimate                         \"4.077967\"        #> slope1Param_Estimate                     \"1.023478\"        #> midPoint1Param_Estimate                  \"6.969609\"        #> slope2Param_Estimate                     \"1.041597\"        #> midPointDistanceParam_Estimate           \"8.060403\"        #> dataInputName                            \"sample01\"        #> betterFit                                \"4\"               #> correctFit                               \"20\"              #> totalFit                                 \"39\"              #> maximum_x                                \"11.02654\"        #> maximum_y                                \"4.077967\"        #> midPoint1_x                              \"6.910455\"        #> midPoint1_y                              \"2.038983\"        #> midPoint2_x                              \"15.08807\"        #> midPoint2_y                              \"2.697808\"        #> slope1                                   \"1.074553\"        #> slope2                                   \"-0.7401649\"      #> finalAsymptoteIntensity                  \"1.31765\"         #> incrementTime                            \"3.795036\"        #> startPoint_x                             \"5.012937\"        #> startPoint_y                             \"0\"               #> reachMaximum_x                           \"8.807973\"        #> reachMaximum_y                           \"4.077967\"        #> decrementTime                            \"3.729327\"        #> startDeclinePoint_x                      \"13.22341\"        #> startDeclinePoint_y                      \"4.077967\"        #> endDeclinePoint_x                        \"16.95274\"        #> endDeclinePoint_y                        \"1.31765\""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"useful parameter calculation with help of fits — parameterCalculation_h0","title":"useful parameter calculation with help of fits — parameterCalculation_h0","text":"Generates useful values external use, help parameterVector's fits.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"useful parameter calculation with help of fits — parameterCalculation_h0","text":"","code":"parameterCalculation_h0(parameterVector, stepSize = 1e-05)"},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"useful parameter calculation with help of fits — parameterCalculation_h0","text":"parameterVector Output multiple fit function sicegar::multipleFitFunction() gives variables related sigmoidal double sigmoidal fit. stepSize Step size used fitting algorithm. Smaller numbers gave accurate results larger numbers, larger numbers gave results faster small numbers. default value 0.00001.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"useful parameter calculation with help of fits — parameterCalculation_h0","text":"Returns expanded parameter vector. vector includes useful derived values time intensity start point, addition standard values fit algorithms produce necessary define curves.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/parameterCalculation_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"useful parameter calculation with help of fits — parameterCalculation_h0","text":"","code":"time <- seq(3, 24, 0.1)  #simulate intensity data with noise noise_parameter <- 0.2 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sicegar::doublesigmoidalFitFormula_h0(time,                                             finalAsymptoteIntensityRatio = .3,                                             maximum = 4,                                             slope1Param = 1,                                             midPoint1Param = 7,                                             slope2Param = 1,                                             midPointDistanceParam = 8,                                             h0 = 0) #> Error: 'doublesigmoidalFitFormula_h0' is not an exported object from 'namespace:sicegar' intensity <- intensity+intensity_noise #> Error: object 'intensity' not found  dataInput <- data.frame(intensity = intensity, time = time) #> Error: object 'intensity' not found normalizedInput <- sicegar::normalizeData_h0(dataInput) #> Error: 'normalizeData_h0' is not an exported object from 'namespace:sicegar' parameterVector <- sicegar::multipleFitFunction_h0(dataInput = normalizedInput,                                             dataInputName = \"sample01\",                                             model = \"doublesigmoidal\",                                             n_runs_min = 20,                                             n_runs_max = 500,                                             showDetails = FALSE) #> Error: object 'normalizedInput' not found  if(parameterVector$isThisaFit){        parameterVector <- sicegar::parameterCalculation_h0(parameterVector) } #> Error: object 'parameterVector' not found  print(t(parameterVector)) #> Error: object 'parameterVector' not found"},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for signal in the data. — preCategorize","title":"Checks for signal in the data. — preCategorize","text":"Checks signal present data. Often high percentage high -put data contain signal. Checking data contain signal sigmoidal double sigmoidal fit can make analysis data high-throughput experiments much faster.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for signal in the data. — preCategorize","text":"","code":"preCategorize(   normalizedInput,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3 )"},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for signal in the data. — preCategorize","text":"normalizedInput output sicegar::normalizeData() function. threshold_intensity_range minimum intensity range, .e. lower limit allowed difference maximum minimum intensities (Default 0.1, values based actual, rescaled data.). threshold_minimum_for_intensity_maximum minimum allowed value intensity maximum. (Default 0.3, values based actual, rescaled data.).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for signal in the data. — preCategorize","text":"Function returns brief decision list includes information decision process. Post important part information decisionList$decisionwhich might either \"no_signal\" \"not_no_signal\".","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for signal in the data. — preCategorize","text":"","code":"# Example 1 with double sigmoidal data  time=seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter = 0.2 intensity_noise = runif(n = length(time), min = 0, max = 1) * noise_parameter intensity = sicegar::doublesigmoidalFitFormula(time,                                               finalAsymptoteIntensityRatio = .3,                                               maximum = 4,                                               slope1Param = 1,                                               midPoint1Param = 7,                                               slope2Param = 1,                                               midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- sicegar::normalizeData(dataInput, dataInputName = \"sample001\") isThis_nosignal <- sicegar::preCategorize(normalizedInput = normalizedInput)    # Example 2 with no_signal data  time <- seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.05 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter * 2e-04 intensity <- sicegar::doublesigmoidalFitFormula(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 2e-04,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity=intensity, time=time) normalizedInput <- sicegar::normalizeData(dataInput,dataInputName = \"sample001\") isThis_nosignal <- sicegar::preCategorize(normalizedInput = normalizedInput)"},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for signal in the data. — preCategorize_h0","title":"Checks for signal in the data. — preCategorize_h0","text":"Checks signal present data. Often high percentage high -put data contain signal. Checking data contain signal sigmoidal double sigmoidal fit can make analysis data high-throughput experiments much faster.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for signal in the data. — preCategorize_h0","text":"","code":"preCategorize_h0(   normalizedInput,   threshold_intensity_range = 0.1,   threshold_minimum_for_intensity_maximum = 0.3 )"},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for signal in the data. — preCategorize_h0","text":"normalizedInput output sicegar::normalizeData_h0() function. threshold_intensity_range minimum intensity range, .e. lower limit allowed difference maximum minimum intensities (Default 0.1, values based actual, rescaled data.). threshold_minimum_for_intensity_maximum minimum allowed value intensity maximum. (Default 0.3, values based actual, rescaled data.).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for signal in the data. — preCategorize_h0","text":"Function returns brief decision list includes information decision process. Post important part information decisionList$decisionwhich might either \"no_signal\" \"not_no_signal\".","code":""},{"path":"https://hardin47.github.io/sicegar/reference/preCategorize_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for signal in the data. — preCategorize_h0","text":"","code":"# Example 1 with double sigmoidal data  time=seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter = 0.2 intensity_noise = runif(n = length(time), min = 0, max = 1) * noise_parameter intensity = sicegar::doublesigmoidalFitFormula_h0(time,                                               finalAsymptoteIntensityRatio = .3,                                               maximum = 4,                                               slope1Param = 1,                                               midPoint1Param = 7,                                               slope2Param = 1,                                               midPointDistanceParam = 8,                                               h0 = 0) #> Error: 'doublesigmoidalFitFormula_h0' is not an exported object from 'namespace:sicegar' intensity <- intensity + intensity_noise #> Error: object 'intensity' not found  dataInput <- data.frame(intensity = intensity, time = time) #> Error: object 'intensity' not found normalizedInput <- sicegar::normalizeData_h0(dataInput, dataInputName = \"sample001\") #> Error: 'normalizeData_h0' is not an exported object from 'namespace:sicegar' isThis_nosignal <- sicegar::preCategorize_h0(normalizedInput = normalizedInput) #> Error: object 'normalizedInput' not found    # Example 2 with no_signal data  time <- seq(3, 24, 0.1)  #simulate intensity data and add noise noise_parameter <- 0.05 intensity_noise <- runif(n = length(time), min = 0, max = 1) * noise_parameter * 2e-04 intensity <- sicegar::doublesigmoidalFitFormula_h0(time,                                                finalAsymptoteIntensityRatio = .3,                                                maximum = 2e-04,                                                slope1Param = 1,                                                midPoint1Param = 7,                                                slope2Param = 1,                                                midPointDistanceParam = 8,                                                h0 = 0) #> Error: 'doublesigmoidalFitFormula_h0' is not an exported object from 'namespace:sicegar' intensity <- intensity + intensity_noise #> Error: object 'intensity' not found  dataInput <- data.frame(intensity=intensity, time=time) #> Error: object 'intensity' not found normalizedInput <- sicegar::normalizeData_h0(dataInput,dataInputName = \"sample001\") #> Error: 'normalizeData_h0' is not an exported object from 'namespace:sicegar' isThis_nosignal <- sicegar::preCategorize_h0(normalizedInput = normalizedInput) #> Error: object 'normalizedInput' not found"},{"path":"https://hardin47.github.io/sicegar/reference/sameSourceDataCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Check is data came from the same source. — sameSourceDataCheck","title":"Check is data came from the same source. — sameSourceDataCheck","text":"Checks provided data models came source looking \".dataInputName\" columns inputs.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sameSourceDataCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check is data came from the same source. — sameSourceDataCheck","text":"","code":"sameSourceDataCheck(dataInput, sigmoidalFitVector, doubleSigmoidalFitVector)"},{"path":"https://hardin47.github.io/sicegar/reference/sameSourceDataCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check is data came from the same source. — sameSourceDataCheck","text":"dataInput data frame composed two columns. One time intensity. normalized data generated normalizeData. sigmoidalFitVector output sigmoidalFitFunction. Default NULL. doubleSigmoidalFitVector output double sigmoidal fit function. Default NULL.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sameSourceDataCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check is data came from the same source. — sameSourceDataCheck","text":"Returns TRUE models can source, FALSE otherwise.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"sigmoidalFitFormula — sigmoidalFitFormula","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"Calculates intesities given time points (x) using sigmoidal fit model parameters (maximum, slopeParam, midpoint).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"","code":"sigmoidalFitFormula(x, maximum, slopeParam, midPoint)"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"x \"time\" (time) column dataframe. maximum maximum intensity sigmoidal function can reach time approaches infinity. slopeParam slope parameter sigmoidal function steppest point. midPoint x axis value steppest point function.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"Returns predicted intensities given time points given sigmoidal fit parameters.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sigmoidalFitFormula — sigmoidalFitFormula","text":"","code":"time <- seq(3, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 0.1 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula(time, maximum = 4, slopeParam = 1, midPoint = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 2)  #Check the results if(parameterVector$isThisaFit){  intensityTheoretical <- sigmoidalFitFormula(time,                                              maximum = parameterVector$maximum_Estimate,                                              slopeParam = parameterVector$slopeParam_Estimate,                                              midPoint = parameterVector$midPoint_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical)) +    expand_limits(x = 0, y = 0) }   if(!parameterVector$isThisaFit){   print(parameterVector) }"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"sigmoidalFitFormula_h0 — sigmoidalFitFormula_h0","title":"sigmoidalFitFormula_h0 — sigmoidalFitFormula_h0","text":"Calculates intesities given time points (x) using sigmoidal fit model parameters (maximum, slopeParam, midpoint, h0).","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sigmoidalFitFormula_h0 — sigmoidalFitFormula_h0","text":"","code":"sigmoidalFitFormula_h0(x, maximum, slopeParam, midPoint, h0)"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sigmoidalFitFormula_h0 — sigmoidalFitFormula_h0","text":"x \"time\" (time) column dataframe. maximum maximum intensity sigmoidal function can reach time approaches infinity. slopeParam slope parameter sigmoidal function steppest point. midPoint x axis value steppest point function. h0 lower asymptote (baseline) intensity","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sigmoidalFitFormula_h0 — sigmoidalFitFormula_h0","text":"Returns predicted intensities given time points given sigmoidal fit parameters.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFormula_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sigmoidalFitFormula_h0 — sigmoidalFitFormula_h0","text":"","code":"time <- seq(3, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 0.1 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula_h0(time, maximum = 4, slopeParam = 1, midPoint = 8, h0 = 0) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData_h0(dataInput) #> Error in normalizeData_h0(dataInput): could not find function \"normalizeData_h0\" parameterVector <- sigmoidalFitFunction_h0(normalizedInput, tryCounter = 2) #> Error: object 'normalizedInput' not found  #Check the results if(parameterVector$isThisaFit){  intensityTheoretical <- sigmoidalFitFormula_h0(time,                                              maximum = parameterVector$maximum_Estimate,                                              slopeParam = parameterVector$slopeParam_Estimate,                                              midPoint = parameterVector$midPoint_Estimate,                                              h0 = parameterVector$h0_Estimate)   comparisonData <- cbind(dataInput, intensityTheoretical)   require(ggplot2)  ggplot(comparisonData) +    geom_point(aes(x = time, y = intensity)) +    geom_line(aes(x = time, y = intensityTheoretical)) +    expand_limits(x = 0, y = 0) } #> Error: object 'parameterVector' not found  if(!parameterVector$isThisaFit){   print(parameterVector) } #> Error: object 'parameterVector' not found"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoidal fit function — sigmoidalFitFunction","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"function fits sigmoidal curve given data using likelihood maximization (LM) algorithm provides parameters (maximum, slopeParam , midPoint) describing double-sigmoidal fit output. also contains information goodness fits AIC, BIC, residual sum squares, log likelihood.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"","code":"sigmoidalFitFunction(   dataInput,   tryCounter,   startList = list(maximum = 1, slopeParam = 1, midPoint = 0.33),   lowerBounds = c(maximum = 0.3, slopeParam = 0.01, midPoint = -0.52),   upperBounds = c(maximum = 1.5, slopeParam = 180, midPoint = 1.15),   min_Factor = 1/2^20,   n_iterations = 1000 )"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. tryCounter counter shows number times data fit via maximum likelihood function. startList initial set parameters vector algorithm tries first fit attempt relevant parameters. vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'.  Detailed explanations parameters can found vignettes. Defaults maximum = 1, slopeParam = 1 , midPoint = 0.33. numbers normalized time intensity scale. lowerBounds lower bounds randomly generated start parameters.  vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'. Detailed explanations parameters can found vignettes. Defaults maximum = 0.3, slopeParam = 0.01, midPoint = -0.52. numbers normalized time intensity scale. upperBounds upper bounds randomly generated start parameters.  vector composes three elements; 'maximum', 'slopeParam' , 'midPoint'. Detailed explanations parameters can found vignettes. Defaults maximum = 1.5, slopeParam = 180,  midPoint = 1.15. numbers normalized time intensity scale. min_Factor Defines minimum step size used fitting algorithm. Default 1/2^20. n_iterations Defines maximum number iterations used fitting algorithm. Default 1000","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"Returns fitted parameters sigmoidal model.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoidal fit function — sigmoidalFitFunction","text":"","code":"time <- seq(3, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 0.1 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula(time, maximum = 4, slopeParam = 1, midPoint = 8) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData(dataInput) parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 2)  #Check the results if(parameterVector$isThisaFit){ intensityTheoretical <- sigmoidalFitFormula(time,                                            maximum = parameterVector$maximum_Estimate,                                            slopeParam = parameterVector$slopeParam_Estimate,                                            midPoint = parameterVector$midPoint_Estimate)  comparisonData <- cbind(dataInput, intensityTheoretical)  require(ggplot2) ggplot(comparisonData) +  geom_point(aes(x = time, y = intensity)) +  geom_line(aes(x = time, y = intensityTheoretical)) +  expand_limits(x = 0, y = 0) }  if(!parameterVector$isThisaFit){   print(parameterVector) } #>   maximum_N_Estimate maximum_Std_Error maximum_t_value maximum_Pr_t #> 1                 NA                NA              NA           NA #>   slopeParam_N_Estimate slopeParam_Std_Error slopeParam_t_value slopeParam_Pr_t #> 1                    NA                   NA                 NA              NA #>   midPoint_N_Estimate midPoint_Std_Error midPoint_t_value midPoint_Pr_t #> 1                  NA                 NA               NA            NA #>   residual_Sum_of_Squares log_likelihood AIC_value BIC_value isThisaFit #> 1                     Inf             NA        NA        NA      FALSE #>   startVector.maximum startVector.slopeParam startVector.midPoint #> 1           0.7897141               136.7403          -0.09691959 #>   dataScalingParameters.timeRange dataScalingParameters.intensityMin #> 1                              24                         0.05452632 #>   dataScalingParameters.intensityMax dataScalingParameters.intensityRange #> 1                           4.088799                             4.034273 #>       model maximum_Estimate slopeParam_Estimate midPoint_Estimate #> 1 sigmoidal               NA                  NA                NA"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction_h0.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigmoidal fit function with h0 estimation — sigmoidalFitFunction_h0","title":"Sigmoidal fit function with h0 estimation — sigmoidalFitFunction_h0","text":"function fits sigmoidal curve given data using likelihood maximization (LM) algorithm provides parameters (maximum, slopeParam, midPoint, h0) describing double-sigmoidal fit output. also contains information goodness fits AIC, BIC, residual sum squares, log likelihood.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction_h0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigmoidal fit function with h0 estimation — sigmoidalFitFunction_h0","text":"","code":"sigmoidalFitFunction_h0(   dataInput,   tryCounter,   startList = list(maximum = 1, slopeParam = 1, midPoint = 0.33, h0 = 0),   lowerBounds = c(maximum = 0.3, slopeParam = 0.01, midPoint = -0.52, h0 = 0),   upperBounds = c(maximum = 1.5, slopeParam = 180, midPoint = 1.15, h0 = 0.3),   min_Factor = 1/2^20,   n_iterations = 1000 )"},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction_h0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigmoidal fit function with h0 estimation — sigmoidalFitFunction_h0","text":"dataInput data frame list contatining dataframe. data frame composed least two columns. One represents time, represents intensity. data normalized normalize data function sicegar::normalizeData() imported function. tryCounter counter shows number times data fit via maximum likelihood function. startList initial set parameters vector algorithm tries first fit attempt relevant parameters. vector composes four elements; 'maximum', 'slopeParam', 'midPoint', 'h0'.  Detailed explanations parameters can found vignettes. Defaults maximum = 1, slopeParam = 1, midPoint = 0.33, h0 = 0. numbers normalized time intensity scale. lowerBounds lower bounds randomly generated start parameters.  vector composes three elements; 'maximum', 'slopeParam', 'midPoint', 'h0'. Detailed explanations parameters can found vignettes. Defaults maximum = 0.3, slopeParam = 0.01, midPoint = -0.52, h0 = 0. numbers normalized time intensity scale. upperBounds upper bounds randomly generated start parameters.  vector composes three elements; 'maximum', 'slopeParam','midPoint', 'h0'. Detailed explanations parameters can found vignettes. Defaults maximum = 1.5, slopeParam = 180, midPoint = 1.15, h0 = 0.3. numbers normalized time intensity scale. min_Factor Defines minimum step size used fitting algorithm. Default 1/2^20. n_iterations Defines maximum number iterations used fitting algorithm. Default 1000","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction_h0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sigmoidal fit function with h0 estimation — sigmoidalFitFunction_h0","text":"Returns fitted parameters sigmoidal model.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/sigmoidalFitFunction_h0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigmoidal fit function with h0 estimation — sigmoidalFitFunction_h0","text":"","code":"time <- seq(3, 24, 0.5)  #simulate intensity data and add noise noise_parameter <- 0.1 intensity_noise <- stats::runif(n = length(time), min = 0, max = 1) * noise_parameter intensity <- sigmoidalFitFormula_h0(time, maximum = 4, slopeParam = 1, midPoint = 8, h0 = 0) intensity <- intensity + intensity_noise  dataInput <- data.frame(intensity = intensity, time = time) normalizedInput <- normalizeData_h0(dataInput) #> Error in normalizeData_h0(dataInput): could not find function \"normalizeData_h0\" parameterVector <- sigmoidalFitFunction_h0(normalizedInput, tryCounter = 2) #> Error: object 'normalizedInput' not found  #Check the results if(parameterVector$isThisaFit){ intensityTheoretical <- sigmoidalFitFormula_h0(time,                                            maximum = parameterVector$maximum_Estimate,                                            slopeParam = parameterVector$slopeParam_Estimate,                                            midPoint = parameterVector$midPoint_Estimate,                                            h0 = h0_estimate)  comparisonData <- cbind(dataInput, intensityTheoretical)  require(ggplot2) ggplot(comparisonData) +  geom_point(aes(x = time, y = intensity)) +  geom_line(aes(x = time, y = intensityTheoretical)) +  expand_limits(x = 0, y = 0) } #> Error: object 'parameterVector' not found  if(!parameterVector$isThisaFit){   print(parameterVector) } #> Error: object 'parameterVector' not found"},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnormalization of given data — unnormalizeData","title":"Unnormalization of given data — unnormalizeData","text":"Maps given time-intensity data rescaled frame time zero one intensity also zero one.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnormalization of given data — unnormalizeData","text":"","code":"unnormalizeData(dataInput)"},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnormalization of given data — unnormalizeData","text":"dataInput list file composes two parts First part data unnormalized, data frame composed two columns. One time intensity Second part scaling parameters data vector three components. first one related time last two related intensity. second value represents min value intensity set. First third values represent difference max min value relevant column.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnormalization of given data — unnormalizeData","text":"Returns data frame, scaling factors scaling constants time intensity. data frame includes 2 columns one normalized time noralized intensity. whole time distributed 0 1 similarly whole intensity distributed 0 1. time intensity constants scaling factors parameters transform data given set scaled set.","code":""},{"path":"https://hardin47.github.io/sicegar/reference/unnormalizeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnormalization of given data — unnormalizeData","text":"","code":"# generateRandomData time <- seq(3, 48, 0.5) intensity <- runif(length(time), 3.0, 7.5) dataInput <- data.frame(time, intensity) # Normalize Data dataOutput <- normalizeData(dataInput) dataInput2 <- dataOutput # Un Normalize it dataOutput2 <- unnormalizeData(dataInput2)"}]
